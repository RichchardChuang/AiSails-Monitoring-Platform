import React, { useState, useEffect } from 'react';
import { FileText, Download, Filter, Search, Calendar, Power, ToggleLeft, ToggleRight, AlertTriangle, CheckCircle, Activity } from 'lucide-react';

const Reports = ({ realTimeData, apiRequest }) => {
  const [logs, setLogs] = useState([]);
  const [filteredLogs, setFilteredLogs] = useState([]);
  const [filterType, setFilterType] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [dateRange, setDateRange] = useState('today');

  // 模擬操作日誌數據
  useEffect(() => {
    const mockLogs = [
      {
        id: 1,
        timestamp: new Date().toISOString(),
        system: 'SkySails PN14',
        operation: 'Switch ON',
        component: 'Main Power',
        user: 'Admin',
        status: 'success',
        details: 'Successfully activated main power switch'
      },
      {
        id: 2,
        timestamp: new Date(Date.now() - 300000).toISOString(),
        system: 'ESS Battery',
        operation: 'UPS Switch OFF',
        component: 'UPS System',
        user: 'Operator',
        status: 'success',
        details: 'UPS system safely switched off for maintenance'
      },
      {
        id: 3,
        timestamp: new Date(Date.now() - 600000).toISOString(),
        system: 'PCS System',
        operation: 'Frequency Adjustment',
        component: 'Frequency Control',
        user: 'Engineer',
        status: 'success',
        details: 'Adjusted frequency from 19Hz to 20Hz'
      },
      {
        id: 4,
        timestamp: new Date(Date.now() - 900000).toISOString(),
        system: 'Air Conditioning',
        operation: 'Mode Change',
        component: 'Cooling Mode',
        user: 'Admin',
        status: 'success',
        details: 'Changed from heating to cooling mode'
      },
      {
        id: 5,
        timestamp: new Date(Date.now() - 1200000).toISOString(),
        system: 'Diesel Generator',
        operation: 'Test Run',
        component: 'Engine Start',
        user: 'Technician',
        status: 'warning',
        details: 'Test run completed with minor oil pressure warning'
      },
      {
        id: 6,
        timestamp: new Date(Date.now() - 1500000).toISOString(),
        system: 'ESS Battery',
        operation: 'Charging Start',
        component: 'Battery Management',
        user: 'System',
        status: 'success',
        details: 'Automatic charging cycle initiated'
      },
      {
        id: 7,
        timestamp: new Date(Date.now() - 1800000).toISOString(),
        system: 'PCS System',
        operation: 'Grid Connection',
        component: 'Grid Interface',
        user: 'Operator',
        status: 'success',
        details: 'Successfully connected to main grid'
      },
      {
        id: 8,
        timestamp: new Date(Date.now() - 2100000).toISOString(),
        system: 'SkySails PN14',
        operation: 'Emergency Stop',
        component: 'Safety System',
        user: 'Safety Officer',
        status: 'error',
        details: 'Emergency stop activated due to high wind speed'
      }
    ];
    
    setLogs(mockLogs);
    setFilteredLogs(mockLogs);
  }, []);

  // 過濾日誌
  useEffect(() => {
    let filtered = logs;

    // 按狀態過濾
    if (filterType !== 'all') {
      filtered = filtered.filter(log => log.status === filterType);
    }

    // 按搜索詞過濾
    if (searchTerm) {
      filtered = filtered.filter(log => 
        log.system.toLowerCase().includes(searchTerm.toLowerCase()) ||
        log.operation.toLowerCase().includes(searchTerm.toLowerCase()) ||
        log.component.toLowerCase().includes(searchTerm.toLowerCase()) ||
        log.details.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    // 按日期範圍過濾
    const now = new Date();
    if (dateRange === 'today') {
      filtered = filtered.filter(log => {
        const logDate = new Date(log.timestamp);
        return logDate.toDateString() === now.toDateString();
      });
    } else if (dateRange === 'week') {
      const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
      filtered = filtered.filter(log => new Date(log.timestamp) >= weekAgo);
    }

    setFilteredLogs(filtered);
  }, [logs, filterType, searchTerm, dateRange]);

  const getStatusIcon = (status) => {
    switch(status) {
      case 'success': return <CheckCircle className="w-4 h-4 text-green-500" />;
      case 'warning': return <AlertTriangle className="w-4 h-4 text-yellow-500" />;
      case 'error': return <AlertTriangle className="w-4 h-4 text-red-500" />;
      default: return <Activity className="w-4 h-4 text-gray-500" />;
    }
  };

  const getStatusBadge = (status) => {
    const colors = {
      success: 'bg-green-100 text-green-800',
      warning: 'bg-yellow-100 text-yellow-800',
      error: 'bg-red-100 text-red-800'
    };
    
    return (
      <span className={`px-2 py-1 rounded-full text-xs font-medium ${colors[status] || 'bg-gray-100 text-gray-800'}`}>
        {status.toUpperCase()}
      </span>
    );
  };

  const exportLogs = () => {
    const csvContent = [
      ['Timestamp', 'System', 'Operation', 'Component', 'User', 'Status', 'Details'],
      ...filteredLogs.map(log => [
        new Date(log.timestamp).toLocaleString(),
        log.system,
        log.operation,
        log.component,
        log.user,
        log.status,
        log.details
      ])
    ].map(row => row.join(',')).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `operation_logs_${new Date().toISOString().split('T')[0]}.csv`;
    a.click();
    window.URL.revokeObjectURL(url);
  };

  const OperationSummary = () => {
    const summary = logs.reduce((acc, log) => {
      acc.total++;
      acc[log.status] = (acc[log.status] || 0) + 1;
      return acc;
    }, { total: 0, success: 0, warning: 0, error: 0 });

    return (
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div className="bg-white/70 rounded-2xl p-6 shadow-sm border border-gray-100">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-500 font-medium">Total Operations</p>
              <p className="text-2xl font-bold text-gray-900">{summary.total}</p>
            </div>
            <FileText className="w-8 h-8 text-blue-500" />
          </div>
        </div>

        <div className="bg-white/70 rounded-2xl p-6 shadow-sm border border-gray-100">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-500 font-medium">Successful</p>
              <p className="text-2xl font-bold text-green-600">{summary.success || 0}</p>
            </div>
            <CheckCircle className="w-8 h-8 text-green-500" />
          </div>
        </div>

        <div className="bg-white/70 rounded-2xl p-6 shadow-sm border border-gray-100">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-500 font-medium">Warnings</p>
              <p className="text-2xl font-bold text-yellow-600">{summary.warning || 0}</p>
            </div>
            <AlertTriangle className="w-8 h-8 text-yellow-500" />
          </div>
        </div>

        <div className="bg-white/70 rounded-2xl p-6 shadow-sm border border-gray-100">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-500 font-medium">Errors</p>
              <p className="text-2xl font-bold text-red-600">{summary.error || 0}</p>
            </div>
            <AlertTriangle className="w-8 h-8 text-red-500" />
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-6">
      <div className="bg-gradient-to-r from-blue-600 to-blue-800 rounded-xl p-6 text-white">
        <h2 className="text-2xl font-bold mb-2">Operation Reports</h2>
        <p className="text-blue-100">系統操作日誌與開關狀態記錄</p>
      </div>

      <OperationSummary />

      {/* 過濾和搜索控制 */}
      <div className="bg-white/70 rounded-2xl p-6 shadow-sm border border-gray-100">
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0 lg:space-x-4">
          <div className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4">
            <div className="flex items-center space-x-2">
              <Filter className="w-4 h-4 text-gray-500" />
              <select 
                value={filterType}
                onChange={(e) => setFilterType(e.target.value)}
                className="border border-gray-200 rounded-lg px-3 py-2 text-sm"
              >
                <option value="all">All Status</option>
                <option value="success">Success</option>
                <option value="warning">Warning</option>
                <option value="error">Error</option>
              </select>
            </div>

            <div className="flex items-center space-x-2">
              <Calendar className="w-4 h-4 text-gray-500" />
              <select 
                value={dateRange}
                onChange={(e) => setDateRange(e.target.value)}
                className="border border-gray-200 rounded-lg px-3 py-2 text-sm"
              >
                <option value="today">Today</option>
                <option value="week">This Week</option>
                <option value="month">This Month</option>
                <option value="all">All Time</option>
              </select>
            </div>
          </div>

          <div className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4">
            <div className="flex items-center space-x-2">
              <Search className="w-4 h-4 text-gray-500" />
              <input
                type="text"
                placeholder="Search operations..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="border border-gray-200 rounded-lg px-3 py-2 text-sm w-full sm:w-auto"
              />
            </div>

            <button
              onClick={exportLogs}
              className="flex items-center space-x-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
            >
              <Download className="w-4 h-4" />
              <span>Export</span>
            </button>
          </div>
        </div>
      </div>

      {/* 操作日誌列表 */}
      <div className="bg-white/70 rounded-2xl shadow-sm border border-gray-100 overflow-hidden">
        <div className="px-6 py-4 border-b border-gray-200">
          <h3 className="text-lg font-semibold">Operation Logs</h3>
          <p className="text-sm text-gray-500">Total: {filteredLogs.length} records</p>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Timestamp</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">System</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Operation</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Component</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Details</th>
              </tr>
            </thead>
            <tbody className="bg-white/70 divide-y divide-gray-200">
              {filteredLogs.map((log) => (
                <tr key={log.id} className="hover:bg-gray-50 transition-colors">
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {new Date(log.timestamp).toLocaleString('zh-TW')}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      {log.system === 'SkySails PN14' && <Power className="w-4 h-4 text-blue-500 mr-2" />}
                      {log.system.includes('ESS') && <ToggleLeft className="w-4 h-4 text-green-500 mr-2" />}
                      {log.system.includes('PCS') && <ToggleRight className="w-4 h-4 text-purple-500 mr-2" />}
                      {log.system.includes('Diesel') && <Power className="w-4 h-4 text-orange-500 mr-2" />}
                      {log.system.includes('Air') && <Activity className="w-4 h-4 text-cyan-500 mr-2" />}
                      <span className="text-sm font-medium text-gray-900">{log.system}</span>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{log.operation}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{log.component}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{log.user}</td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center space-x-2">
                      {getStatusIcon(log.status)}
                      {getStatusBadge(log.status)}
                    </div>
                  </td>
                  <td className="px-6 py-4 text-sm text-gray-500 max-w-xs truncate" title={log.details}>
                    {log.details}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {filteredLogs.length === 0 && (
          <div className="text-center py-12">
            <FileText className="w-12 h-12 text-gray-300 mx-auto mb-4" />
            <p className="text-gray-500">No logs found matching your criteria</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Reports;